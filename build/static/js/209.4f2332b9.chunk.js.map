{"version":3,"file":"static/js/209.4f2332b9.chunk.js","mappings":"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","sources":["views/breakdown/BreakdownHistory.js"],"sourcesContent":["import React from 'react'\r\nimport axios from 'axios'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { FaEdit } from 'react-icons/fa'\r\nimport {\r\n  CAvatar,\r\n  CButton,\r\n  CButtonGroup,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CProgress,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react'\r\nimport { format } from 'date-fns'\r\nimport * as XLSX from 'xlsx'\r\nimport loadingGif from '../assetTable/loader.gif'\r\nimport '../assetTable/asset.css'\r\nimport { Table, Thead, Tbody, Tr, Th, Td } from 'react-super-responsive-table'\r\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css'\r\n\r\nclass BreakdownHistory extends React.Component {\r\n  state = {\r\n    breakdowns: [],\r\n    selectedMachine: '',\r\n    // mtbf: '',\r\n    mttr: '',\r\n    selectedLocation: '',\r\n    searchLocation: '', // New state for the search term\r\n    message: '',\r\n    searchQuery: '',\r\n    isHovered: false,\r\n    loading: true, // New state for loading\r\n  }\r\n\r\n  handleMouseEnter = () => {\r\n    this.setState({ isHovered: true })\r\n  }\r\n\r\n  handleMouseLeave = () => {\r\n    this.setState({ isHovered: false })\r\n  }\r\n\r\n  handleSearchChange = (e) => {\r\n    const query = e.target.value.toLowerCase()\r\n\r\n    // Filter assets based on the search query\r\n    const filteredAssets = this.state.breakdowns.filter((breakDown) => {\r\n      const taskLocationLower = (breakDown.Location || '').toLowerCase()\r\n      // const taskDescriptionLower = (asset.TaskDescription || '').toLowerCase()\r\n      // const scheduledMaintenanceLower = (\r\n      //   asset.ScheduledMaintenanceDatesandIntervals || ''\r\n      // ).toLowerCase()\r\n      // const statusLower = (asset.status || '').toLowerCase()\r\n\r\n      return taskLocationLower.includes(query)\r\n      // taskDescriptionLower.includes(query) ||\r\n      // scheduledMaintenanceLower.includes(query) ||\r\n      // statusLower.includes(query)\r\n    })\r\n\r\n    this.setState({\r\n      filteredAssets,\r\n      // searchLocation: e.target.value,\r\n      searchQuery: query,\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { selectedLocation } = this.state\r\n\r\n    const apiUrl = selectedLocation\r\n      ? `https://backendmaintenx.onrender.com/api/breakdown?location=${selectedLocation}`\r\n      : 'https://backendmaintenx.onrender.com/api/breakdown'\r\n\r\n    axios\r\n      .get(apiUrl)\r\n      .then((response) => {\r\n        this.setState({\r\n          breakdowns: Array.isArray(response.data) ? response.data : [response.data],\r\n          loading: false,\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error)\r\n        alert('Error fetching data')\r\n        this.setState({ loading: false })\r\n      })\r\n  }\r\n\r\n  handleLocationChange = (event) => {\r\n    this.setState({ selectedLocation: event.target.value })\r\n  }\r\n\r\n  calculateMTTR = () => {\r\n    const { breakdowns, selectedMachine } = this.state\r\n\r\n    if (!selectedMachine) {\r\n      this.setState({ mttr: 'Please select a machine.' })\r\n      return\r\n    }\r\n\r\n    const filteredBreakdowns = breakdowns.filter(\r\n      (breakdown) => breakdown.MachineName === selectedMachine,\r\n    )\r\n\r\n    if (filteredBreakdowns.length === 0) {\r\n      this.setState({ mttr: 'No breakdowns found for selected machine.' })\r\n      return\r\n    }\r\n\r\n    let totalRepairTimeMs = 0\r\n\r\n    filteredBreakdowns.forEach((breakdown) => {\r\n      const startDate = new Date(breakdown.BreakdownStartDate)\r\n      const endDate = new Date(breakdown.BreakdownEndDate)\r\n      const repairTimeMs = endDate - startDate\r\n      totalRepairTimeMs += repairTimeMs\r\n    })\r\n\r\n    const totalRepairTimeHours = totalRepairTimeMs / (1000 * 3600) // Convert milliseconds to hours\r\n\r\n    const mttr = totalRepairTimeHours / filteredBreakdowns.length\r\n\r\n    this.setState({ mttr })\r\n  }\r\n\r\n  calculateMTBF = () => {\r\n    const { breakdowns, selectedMachine } = this.state\r\n\r\n    if (!selectedMachine) {\r\n      this.setState({ mtbf: 'Please select a machine.' })\r\n      return\r\n    }\r\n\r\n    const filteredBreakdowns = breakdowns.filter(\r\n      (breakdown) => breakdown.MachineName === selectedMachine,\r\n    )\r\n\r\n    if (filteredBreakdowns.length === 0) {\r\n      this.setState({ mtbf: 'No breakdowns found for selected machine.' })\r\n      return\r\n    }\r\n\r\n    const fixedOperatingTime = 208 * 3600 * 1000 // 8 hours in milliseconds\r\n    const numberOfFailures = filteredBreakdowns.length\r\n\r\n    const mtbf = fixedOperatingTime / (numberOfFailures * 1000 * 3600) // Convert milliseconds to hours\r\n\r\n    this.setState({ mtbf })\r\n  }\r\n\r\n  exportToExcel = () => {\r\n    const { breakdowns } = this.state\r\n    // const dataToExport = searchQuery ? filteredBreakdowns : breakdowns\r\n    const dataToExport = breakdowns\r\n    const exportData = dataToExport.map((item) => ({\r\n      Date: format(new Date(item.BreakdownStartDate), 'HH:mm:ss dd-MM-yyyy'),\r\n      MachineName: item.MachineName,\r\n      BreakdownStartDate: item.BreakdownStartDate,\r\n      BreakdownType: item.BreakdownType,\r\n      BreakdownEndDate: item.BreakdownEndDate,\r\n      Shift: item.Shift,\r\n      Operations: item.Operations,\r\n      BreakdownPhenomenons: item.BreakdownPhenomenons,\r\n      WhyWhyAnalysis: item.WhyWhyAnalysis,\r\n      OCC: item.OCC,\r\n      RootCause: item.RootCause,\r\n      PreventiveAction: item.PreventiveAction,\r\n      CorrectiveAction: item.CorrectiveAction,\r\n      TargetDate: item.TargetDate,\r\n      Responsibility: item.Responsibility,\r\n      HD: item.HD,\r\n      Status: item.Status,\r\n      SpareParts: item.SpareParts,\r\n      Cost: item.Cost,\r\n      Location: item.Location,\r\n      LineName: item.LineName,\r\n      Remark: item.Remark,\r\n      // Status: item.Status,\r\n    }))\r\n\r\n    const ws = XLSX.utils.json_to_sheet(exportData)\r\n    const wb = XLSX.utils.book_new()\r\n    XLSX.utils.book_append_sheet(wb, ws, 'ReportData')\r\n    XLSX.writeFile(wb, 'reportdata.xlsx')\r\n  }\r\n\r\n  render() {\r\n    // const { breakdowns, selectedMachine, mttr } = this.state;\r\n    const {\r\n      breakdowns,\r\n      selectedMachine,\r\n      mtbf,\r\n      mttr,\r\n      filteredAssets,\r\n      searchLocation,\r\n      searchQuery,\r\n      loading,\r\n    } = this.state\r\n    const openBreakdowns = breakdowns.filter((breakdown) => breakdown.Status === 'close')\r\n\r\n    const validatedAssets = breakdowns.filter(\r\n      (breakdowns) => breakdowns.Location && breakdowns.Location.trim() !== '',\r\n    )\r\n\r\n    const { isHovered } = this.state\r\n\r\n    return (\r\n      <>\r\n        <div className=\"container\" style={{ marginTop: '0px' }}>\r\n          <div>\r\n            <label htmlFor=\"searchTask\" style={{ marginLeft: '0%' }}>\r\n              <span role=\"img\" aria-label=\"search-icon\"></span>\r\n            </label>\r\n            <select\r\n              value={this.searchQuery}\r\n              onChange={this.handleSearchChange}\r\n              style={{\r\n                // display: 'flex',\r\n                marginBottom: '0px',\r\n                padding: '8px',\r\n                border: '1px solid',\r\n                borderRadius: '4px',\r\n                transition: 'border-color 0.3s ease-in-out',\r\n                backgroundColor: isHovered ? '#f0f0f0' : 'transparent',\r\n              }}\r\n              onMouseEnter={this.handleMouseEnter}\r\n              onMouseLeave={this.handleMouseLeave}\r\n            >\r\n              <option>Search by Plant</option>\r\n              <option value=\"Plant 1\">Plant 1</option>\r\n              <option value=\"Plant 2\">Plant 2</option>\r\n              <option value=\"Plant 3\">Plant 3</option>\r\n            </select>\r\n            <CButton\r\n              color=\"info\"\r\n              type=\"button\"\r\n              style={{ margin: '1rem' }}\r\n              onClick={this.exportToExcel}\r\n            >\r\n              Export to Excel\r\n            </CButton>\r\n          </div>\r\n          <div className=\"table-container\">\r\n            <Table className=\"custom-table\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th style={{ textAlign: 'center', height: '40px' }}>Machine Name</Th>\r\n                  <Th style={{ textAlign: 'center' }}>BreakDown Start Date</Th>\r\n                  <Td></Td>\r\n                  <Th style={{ textAlign: 'center' }}>Shift</Th>\r\n                  <Th style={{ textAlign: 'center' }}>Line Name</Th>\r\n                  <Th style={{ textAlign: 'center' }}>Location</Th>\r\n                  <Th style={{ textAlign: 'center' }}>End Date</Th>\r\n                  <Th style={{ textAlign: 'center' }}>Status</Th>\r\n                  <Th style={{ textAlign: 'center' }}>Edit</Th>\r\n                  {/* <th>Images</th> */}\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {loading ? ( // Show loader when loading is true\r\n                  <tr>\r\n                    <td colSpan=\"8\" style={{ textAlign: 'center' }}>\r\n                      {/* Use an image tag for the loading GIF */}\r\n                      <img src={loadingGif} alt=\"Loading...\" />\r\n                      <p>Loading...</p>\r\n                    </td>\r\n                  </tr>\r\n                ) : (\r\n                  <>\r\n                    {this.state.message && (\r\n                      <tr>\r\n                        <td colSpan=\"11\" style={{ textAlign: 'center' }}>\r\n                          {this.state.message}\r\n                        </td>\r\n                      </tr>\r\n                    )}\r\n                    {(this.state.searchQuery\r\n                      ? filteredAssets.filter((breakdown) => openBreakdowns.includes(breakdown))\r\n                      : validatedAssets.filter((breakdown) => openBreakdowns.includes(breakdown))\r\n                    ).map((breakdown) => (\r\n                      <Tr key={breakdown._id}>\r\n                        <Td style={{ textAlign: 'center' }}>{breakdown.MachineName}</Td>\r\n                        <Td style={{ textAlign: 'center' }}>\r\n                          {new Date(breakdown.BreakdownStartDate).toLocaleDateString()}\r\n                        </Td>\r\n                        <Td></Td>\r\n                        <Td style={{ textAlign: 'center' }}>{breakdown.Shift}</Td>\r\n                        <Td style={{ textAlign: 'center' }}>{breakdown.LineName}</Td>\r\n                        <Td style={{ textAlign: 'center' }}>{breakdown.Location}</Td>\r\n                        <Td style={{ textAlign: 'center' }}>\r\n                          {new Date(breakdown.BreakdownEndDate).toLocaleDateString()}\r\n                        </Td>\r\n                        <Td style={{ textAlign: 'center' }}>{breakdown.Status}</Td>\r\n                        <Td style={{ textAlign: 'center' }}>\r\n                          <NavLink to={`/pbdStatus/${breakdown._id}`} style={{ color: '#000080' }}>\r\n                            <FaEdit />\r\n                          </NavLink>\r\n                        </Td>\r\n                        {/* <td style={{ textAlign: 'center' }}>\r\n                        <NavLink to={`/breakDownRecord/${breakdown._id}`}>\r\n                          <img src={breakdown.Image} height={50} width={50} />\r\n                        </NavLink>\r\n                      </td> */}\r\n                      </Tr>\r\n                    ))}\r\n                  </>\r\n                )}\r\n              </Tbody>\r\n            </Table>\r\n          </div>\r\n\r\n          <div\r\n            className=\"container\"\r\n            style={{\r\n              marginTop: '20px',\r\n              padding: '20px',\r\n              backgroundColor: '#f8f9fa',\r\n              borderRadius: '10px',\r\n            }}\r\n          >\r\n            <div className=\"row g-2\">\r\n              <div className=\"col-md-6\" style={{ marginBottom: '10px' }}>\r\n                <label>Select Machine: </label>\r\n                <select\r\n                  onChange={(e) => {\r\n                    this.setState({ selectedMachine: e.target.value }, this.calculateMTBF)\r\n                  }}\r\n                  value={selectedMachine}\r\n                  style={{ marginLeft: '10px', padding: '5px' }}\r\n                >\r\n                  <option value=\"\">Select Machine</option>\r\n                  {Array.from(new Set(breakdowns.map((breakdown) => breakdown.MachineName))).map(\r\n                    (machineName) => (\r\n                      <option key={machineName} value={machineName}>\r\n                        {machineName}\r\n                      </option>\r\n                    ),\r\n                  )}\r\n                </select>\r\n                {/* <button\r\n                  onClick={this.calculateMTBF}\r\n                  style={{\r\n                    marginLeft: '10px',\r\n                    padding: '8px',\r\n                    // backgroundColor: 'darkgrey',\r\n                    color=\"info\",\r\n                    shape=\"rounded-pill\"\r\n                    // border: '1px solid black',\r\n                    // cursor: 'pointer',\r\n                  }}\r\n                >\r\n                  Calculate MTBF\r\n                </button> */}\r\n                <CButton\r\n                  color=\"info\"\r\n                  onClick={this.calculateMTBF}\r\n                  // shape=\"rounded-pill\"\r\n                  className=\"mb-2\"\r\n                  marginLeft=\"20px\"\r\n                  padding=\"8px\"\r\n                  style={{ marginTop: '5px', marginLeft: '10px' }}\r\n                >\r\n                  Calculate MTBF\r\n                </CButton>\r\n              </div>\r\n              <div className=\"col-md-6\" style={{ marginBottom: '10px' }}>\r\n                <label style={{ marginLeft: '' }}>MTBF (hours): </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={mtbf}\r\n                  readOnly\r\n                  style={{ marginLeft: '10px', padding: '5px' }}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-md-6\" style={{ marginBottom: '10px' }}>\r\n                <label>Select Machine: </label>\r\n                <select\r\n                  onChange={(e) => {\r\n                    this.setState({ selectedMachine: e.target.value }, this.calculateMTTR)\r\n                  }}\r\n                  value={selectedMachine}\r\n                  style={{ marginLeft: '10px', padding: '5px' }}\r\n                >\r\n                  <option value=\"\">Select Machine</option>\r\n                  {Array.from(new Set(breakdowns.map((breakdown) => breakdown.MachineName))).map(\r\n                    (machineName) => (\r\n                      <option key={machineName} value={machineName}>\r\n                        {machineName}\r\n                      </option>\r\n                    ),\r\n                  )}\r\n                </select>\r\n                {/* <button\r\n                  onClick={this.calculateMTTR}\r\n                  style={{\r\n                    marginLeft: '10px',\r\n                    padding: '8px',\r\n                    // backgroundColor: 'darkgrey',\r\n                    color: '',\r\n                    border: '1px solid black',\r\n                    cursor: 'pointer',\r\n                  }}\r\n                >\r\n                  Calculate MTTR\r\n                </button> */}\r\n                <CButton\r\n                  color=\"info\"\r\n                  onClick={this.calculateMTBF}\r\n                  // shape=\"rounded-pill\"\r\n                  className=\"mb-2\"\r\n                  marginLeft=\"20px\"\r\n                  padding=\"8px\"\r\n                  style={{ marginTop: '5px', marginLeft: '10px' }}\r\n                >\r\n                  Calculate MTTR\r\n                </CButton>\r\n              </div>\r\n              <div className=\"col-md-6\" style={{ marginBottom: '10px' }}>\r\n                <label style={{ marginLeft: '' }}>MTTR (hours): </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={mttr}\r\n                  readOnly\r\n                  style={{ marginLeft: '10px', padding: '5px' }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BreakdownHistory\r\n"],"names":["BreakdownHistory","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","breakdowns","selectedMachine","mttr","selectedLocation","searchLocation","message","searchQuery","isHovered","loading","handleMouseEnter","setState","handleMouseLeave","handleSearchChange","e","query","target","value","toLowerCase","filteredAssets","filter","breakDown","Location","includes","handleLocationChange","event","calculateMTTR","_this$state","filteredBreakdowns","breakdown","MachineName","totalRepairTimeMs","forEach","startDate","Date","BreakdownStartDate","endDate","BreakdownEndDate","calculateMTBF","_this$state2","mtbf","exportToExcel","exportData","map","item","format","BreakdownType","Shift","Operations","BreakdownPhenomenons","WhyWhyAnalysis","OCC","RootCause","PreventiveAction","CorrectiveAction","TargetDate","Responsibility","HD","Status","SpareParts","Cost","LineName","Remark","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","_createClass","key","_this2","this","apiUrl","axios","get","then","response","isArray","data","catch","error","console","alert","_this3","_this$state3","openBreakdowns","validatedAssets","trim","_jsx","_Fragment","children","_jsxs","className","style","marginTop","htmlFor","marginLeft","role","onChange","marginBottom","padding","border","borderRadius","transition","backgroundColor","onMouseEnter","onMouseLeave","CButton","color","type","margin","onClick","Table","Thead","Tr","Th","textAlign","height","Td","Tbody","colSpan","src","loadingGif","alt","toLocaleDateString","NavLink","to","_id","FaEdit","from","Set","machineName","readOnly","React"],"sourceRoot":""}