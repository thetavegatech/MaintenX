{"version":3,"file":"static/js/664.88833a7f.chunk.js","mappings":"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","sources":["views/PM/PMSchedule.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { NavLink } from 'react-router-dom'\r\nimport dlt from '../assetTable/delete.png'\r\nimport { CTable, CButton, CTableHead } from '@coreui/react'\r\nimport { FaEdit } from 'react-icons/fa'\r\nimport { MdDelete } from 'react-icons/md'\r\nimport loadingGif from '../assetTable/loader.gif'\r\nimport '../assetTable/asset.css'\r\nimport { Table, Thead, Tbody, Tr, Th, Td } from 'react-super-responsive-table'\r\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css'\r\n\r\nclass AssetTable extends React.Component {\r\n  state = {\r\n    assets: [],\r\n    filteredAssets: [],\r\n    searchQuery: '',\r\n    formData: {},\r\n    loading: true, // New state for loading\r\n  }\r\n\r\n  handleMouseEnter = () => {\r\n    this.setState({ isHovered: true })\r\n  }\r\n\r\n  handleMouseLeave = () => {\r\n    this.setState({ isHovered: false })\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.fetchData()\r\n    await this.getAssetLocations()\r\n    // Start the periodic update of the \"Next Date\"\r\n    // this.updateNextDate()\r\n    this.updateNextDate = this.updateNextDate.bind(this)\r\n\r\n    // Set the time for 12:00 AM (midnight)\r\n    const twelveAM = new Date()\r\n    twelveAM.setHours(2, 27, 0, 0)\r\n\r\n    // Calculate the delay until 12:00 AM\r\n    const delay = twelveAM - new Date()\r\n\r\n    // Set up a timeout to run updateNextDate at 12:00 AM every day\r\n    setTimeout(() => {\r\n      this.updateNextDate() // Run the function immediately\r\n      this.updateInterval = setInterval(this.updateNextDate, 24 * 60 * 60 * 1000) // Repeat every 24 hours\r\n    }, delay)\r\n\r\n    axios\r\n      .get('https://backendmaintenx.onrender.com/api/pm')\r\n      .then((response) => {\r\n        let fetchedAssets = Array.isArray(response.data) ? response.data : [response.data]\r\n\r\n        // Set status to \"Pending\" for new tasks\r\n        fetchedAssets = fetchedAssets.map((asset) => {\r\n          if (!asset.status) {\r\n            asset.status = 'Pending'\r\n          }\r\n          return asset\r\n        })\r\n\r\n        // Check and update status for completed tasks based on next date\r\n        const today = new Date()\r\n        fetchedAssets = fetchedAssets.map((asset) => {\r\n          const nextDate = new Date(asset.nextDate)\r\n          if (today >= nextDate && asset.status === 'Completed') {\r\n            // asset.status = 'Pending'\r\n          }\r\n          return asset\r\n        })\r\n\r\n        this.setState({ assets: fetchedAssets, loading: false })\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error)\r\n        alert('Error fetching data')\r\n        this.setState({ loading: false })\r\n      })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.updateInterval)\r\n  }\r\n\r\n  fetchData() {\r\n    axios\r\n      .get('http://192.168.1.3:5000/UserInfo')\r\n      .then((response) => {\r\n        this.setState(response.data)\r\n        console.log(response)\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error)\r\n        alert('Error fetching data')\r\n      })\r\n  }\r\n\r\n  deleteData(id) {\r\n    const isConfirmed = window.confirm('Are you sure you want to delete this data?')\r\n    if (isConfirmed) {\r\n      axios\r\n        .delete(`https://backendmaintenx.onrender.com/api/pm/${id}`)\r\n        .then((response) => {\r\n          console.log('Data deleted:', response.data)\r\n\r\n          // Delete from frontend\r\n          const index = this.state.assets.findIndex((asset) => asset._id === id)\r\n          if (index !== -1) {\r\n            const newAssets = [...this.state.assets]\r\n            newAssets.splice(index, 1)\r\n            this.setState({\r\n              assets: newAssets,\r\n              message: 'Data successfully deleted!',\r\n            })\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error deleting data:', error)\r\n          this.setState({\r\n            message: 'Error deleting data. Please try again.',\r\n          })\r\n\r\n          // Set timeout to clear the error message after 3 seconds (adjust as needed)\r\n          setTimeout(() => {\r\n            this.setState({\r\n              message: '',\r\n            })\r\n          }, 2000)\r\n        })\r\n    }\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState((prevState) => ({\r\n      isClicked: !prevState.isClicked,\r\n    }))\r\n  }\r\n\r\n  getAssetLocations = async () => {\r\n    try {\r\n      const response = await fetch('https://backendmaintenx.onrender.com/locations')\r\n      if (!response.ok) {\r\n        throw new Error(`Error: ${response.status} - ${response.statusText}`)\r\n      }\r\n      const Location = await response.json()\r\n\r\n      if (Location.length === 0) {\r\n        console.log('No locations found.')\r\n      } else {\r\n        console.log('Asset Locations:', Location)\r\n        this.setState({ this: Location })\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching asset locations:', error.message)\r\n    }\r\n  }\r\n\r\n  sendSMS = async (userInfo, phoneNumbers, nextDate, scheduledMaintenance) => {\r\n    const sender = 'AAABRD'\r\n    const apiKey = 'NDE1MDY2NGM2Mzc3NTI0ZjQzNmE1YTM5NDY0YzZlNzU='\r\n    const Data1 = 'PM SChedule'\r\n    const Data2 = 'Check PM Schedule for more.'\r\n    // Loop through each user and send SMS\r\n    for (const user of userInfo) {\r\n      // const { nextDate, ScheduledMaintenanceDatesandIntervals } = this.state.formData\r\n      // const nextDate = this.state.formData.nextDate\r\n      // const scheduledMaintenance = this.state.formData.ScheduledMaintenanceDatesandIntervals\r\n      // Formulate a simple message\r\n      // const message = encodeURIComponent(\r\n      //   'Breakdown For ' +\r\n      //     nextDate +\r\n      //     ' please visit concerned department Details are ' +\r\n      //     scheduledMaintenance +\r\n      //     ' - Aurangabad Auto Ancillary',\r\n      // )\r\n\r\n      const message = encodeURIComponent(\r\n        `Breakdown For ${Data1} please visit concerned department Details are ${Data2} - Aurangabad Auto Ancillary`,\r\n      )\r\n\r\n      // Create the API URL with the current user's phone number\r\n      const url = `https://api.textlocal.in/send/?apikey=${apiKey}&sender=${sender}&numbers=${user.phoneNumber}&message=${message}`\r\n\r\n      // Use fetch to send the SMS\r\n      try {\r\n        const response = await fetch(url)\r\n        const data = await response.json()\r\n\r\n        console.log(`SMS sent successfully to ${user.name} (${user.phoneNumber}):`, data)\r\n      } catch (error) {\r\n        console.error(`Error sending SMS to ${user.name} (${user.phoneNumber}):`, error)\r\n      }\r\n    }\r\n  }\r\n\r\n  updateNextDate = async () => {\r\n    const today = new Date()\r\n    const { assets } = this.state || {}\r\n    const updatedIds = [] // Array to store the IDs of updated assets\r\n    const updatedLocations = []\r\n\r\n    if (!assets) {\r\n      return\r\n    }\r\n\r\n    const updatedAssets = await Promise.all(\r\n      assets.map(async (asset) => {\r\n        const nextDate = new Date(asset.nextDate)\r\n\r\n        if (today >= nextDate) {\r\n          let frequency = asset.ScheduledMaintenanceDatesandIntervals\r\n            ? asset.ScheduledMaintenanceDatesandIntervals.toLowerCase()\r\n            : 'daily' // Default to \"daily\" if frequency is undefined\r\n\r\n          let daysToAdd = 1 // Default to adding 1 day\r\n\r\n          // Determine the number of days to add based on the frequency\r\n          switch (frequency) {\r\n            case 'daily':\r\n              daysToAdd = 1\r\n              break\r\n            case 'weekly':\r\n              daysToAdd = 8\r\n              break\r\n            case 'fifteen days':\r\n              daysToAdd = 7\r\n              break\r\n            case 'monthly':\r\n              // Assuming a month has 30 days, adjust as needed\r\n              daysToAdd = 34\r\n              break\r\n            case 'quarterly':\r\n              // Assuming a quarter has 90 days, adjust as needed\r\n              daysToAdd = 104\r\n              break\r\n            case 'half year':\r\n              // Assuming half a year has 180 days, adjust as needed\r\n              daysToAdd = 208\r\n              break\r\n            case 'yearly':\r\n              // Assuming a year has 365 days, adjust as needed\r\n              daysToAdd = 47\r\n              break\r\n            default:\r\n              console.error(`Unsupported frequency for task: ${asset.TaskName}`)\r\n              // Handle unsupported frequency by defaulting to \"daily\"\r\n              frequency = 'daily'\r\n              daysToAdd = ''\r\n          }\r\n\r\n          // Set the \"Next Date\" to today's date if the calculated date is today or later\r\n          nextDate.setDate(nextDate.getDate() + daysToAdd)\r\n\r\n          // If the calculated next date is a Sunday, skip it\r\n          while (nextDate.getDay() === 0) {\r\n            nextDate.setDate(nextDate.getDate() + 1)\r\n          }\r\n\r\n          // Check if the next date has changed\r\n          if (asset.nextDate !== nextDate.toISOString().split('T')[0]) {\r\n            updatedIds.push(asset._id, asset.Location) // Store the ID of the updated asset\r\n            updatedLocations.push(asset.Location)\r\n          }\r\n\r\n          asset.nextDate = nextDate.toISOString().split('T')[0]\r\n\r\n          // Update status to \"Pending\"\r\n          asset.status = 'Pending'\r\n\r\n          // If the task is completed and the next date is beyond today, set status to \"Pending\"\r\n          if (asset.status === 'Completed' && today < nextDate) {\r\n            asset.status = 'Pending'\r\n          }\r\n        }\r\n\r\n        return asset\r\n      }),\r\n    )\r\n\r\n    // Make a separate API request to get details of updated assets by ID\r\n    try {\r\n      if (updatedIds.length > 0) {\r\n        const idDetailsResponse = await axios.get('https://backendmaintenx.onrender.com/api/pm', {\r\n          params: { ids: updatedIds },\r\n        })\r\n\r\n        console.log('Updated Assets Details:', idDetailsResponse.data)\r\n      } else {\r\n        console.log('No assets were updated.')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching updated assets details:', error)\r\n    }\r\n\r\n    const updatedAssetsArray = await Promise.all(updatedAssets)\r\n\r\n    // Update the state and get the updated IDs\r\n    this.setState({ assets: updatedAssetsArray }, async () => {\r\n      try {\r\n        const response = await axios.put('https://backendmaintenx.onrender.com/api/updateRecords', {\r\n          pms: updatedAssetsArray,\r\n        })\r\n\r\n        console.log('Next Date updated in the database:', response.data)\r\n\r\n        // Access the updated IDs and Locations here\r\n        console.log('Updated IDs:', updatedIds)\r\n        console.log('Updated Locations:', updatedLocations)\r\n\r\n        // Fetch user information for each updated location\r\n        for (const location of updatedLocations) {\r\n          try {\r\n            const userInfoResponse = await axios.get(\r\n              `http://192.168.1.3:5000/UserInfoByLocation/${location}`,\r\n            )\r\n\r\n            const userInfo = userInfoResponse.data\r\n\r\n            // Now userInfo contains user information for the specified location\r\n            // You can loop through userInfo and send SMS to each user\r\n\r\n            const phoneNumbers = userInfo.map((user) => user.phoneNumber)\r\n\r\n            userInfo.forEach((user) => {\r\n              console.log('Sending SMS to user:', user.name, user.phoneNumber)\r\n              // this.sendSMS(userInfo, phoneNumbers)\r\n\r\n              const nextDate = this.state.formData.nextDate\r\n              const scheduledMaintenance = this.state.formData.ScheduledMaintenanceDatesandIntervals\r\n              // Call sendSMS function\r\n              this.sendSMS(userInfo, phoneNumbers, nextDate, scheduledMaintenance)\r\n              // Send SMS logic here using user.phoneNumber\r\n            })\r\n          } catch (error) {\r\n            console.error('Error fetching user info by location:', error)\r\n          }\r\n        }\r\n\r\n        // Now, you can use the updatedIds array as needed\r\n      } catch (error) {\r\n        console.error('Error updating Next Date in the database:', error)\r\n      }\r\n\r\n      // await this.sendSMS(updatedAssetsArray, phoneNumbers)\r\n    })\r\n  }\r\n\r\n  handleSearchChange = (event) => {\r\n    const query = event.target.value.toLowerCase()\r\n\r\n    // Filter assets based on the search query\r\n    const filteredAssets = this.state.assets.filter((asset) => {\r\n      const taskNameLower = (asset.TaskName || '').toLowerCase()\r\n      // const taskDescriptionLower = (asset.TaskDescription || '').toLowerCase()\r\n      // const statusLower = (asset.status || '').toLowerCase()\r\n\r\n      return taskNameLower.includes(query)\r\n      // taskDescriptionLower.includes(query) ||\r\n      // scheduledMaintenanceLower.includes(query) ||\r\n      // statusLower.includes(query)\r\n    })\r\n\r\n    this.setState({\r\n      filteredAssets,\r\n      searchQuery: query,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { assets, filteredAssets, message, searchQuery, loading } = this.state\r\n\r\n    // Apply filter for non-empty \"Task Name\" to both assets and filteredAssets\r\n    const filteredDefaultAssets = assets.filter(\r\n      (asset) => asset.TaskName && asset.TaskName.trim() !== '',\r\n    )\r\n\r\n    const { isClicked } = this.state\r\n\r\n    return (\r\n      <div className=\"container\" style={{ marginTop: '0px' }}>\r\n        <NavLink to=\"/taskForm\">\r\n          <CButton\r\n            // color=\"info\"\r\n            className=\"mb-2\"\r\n            style={{ marginTop: '5px', backgroundColor: '#000026' }}\r\n          >\r\n            Add New\r\n          </CButton>\r\n        </NavLink>\r\n\r\n        {/* <div> */}\r\n        <label htmlFor=\"searchTask\" style={{ marginLeft: '70%' }}>\r\n          <span role=\"img\" aria-label=\"search-icon\"></span>\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"searchTask\"\r\n          placeholder=\"Search Task\"\r\n          style={{\r\n            marginBottom: '10px',\r\n            padding: '8px',\r\n            border: '1px solid ',\r\n            borderRadius: '4px',\r\n            transition: 'border-color 0.3s ease-in-out, background-color 0.3s ease-in-out',\r\n            backgroundColor: isClicked ? '#ccc' : 'transparent',\r\n          }}\r\n          onClick={this.handleClick}\r\n          value={this.searchQuery}\r\n          onChange={this.handleSearchChange}\r\n        />\r\n        {/* </div> */}\r\n\r\n        <div className=\"table-container\">\r\n          <Table className=\"custom-table\">\r\n            <Thead>\r\n              <Tr>\r\n                <Th style={{ textAlign: 'center', height: '40px' }}>Asset Name</Th>\r\n                <Th style={{ textAlign: 'center' }}>Location</Th>\r\n                <Th style={{ textAlign: 'center' }}>Task Name</Th>\r\n                <Th style={{ textAlign: 'center' }}>Task Description</Th>\r\n                {/* <Th></Th> */}\r\n                <Th style={{ textAlign: 'center' }}>Scheduled Maintenance</Th>\r\n                <Th></Th>\r\n                <Th style={{ textAlign: 'center' }}>Start Date</Th>\r\n                <Th style={{ textAlign: 'center' }}>Next Date</Th>\r\n                <Th style={{ textAlign: 'center' }}>Status</Th>\r\n                <Th style={{ textAlign: 'center' }}>Edit </Th>\r\n                <Th style={{ textAlign: 'center' }}>Delete</Th>\r\n                {/* <th>Image</th> */}\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {loading ? ( // Show loader when loading is true\r\n                <tr>\r\n                  <td colSpan=\"11\" style={{ textAlign: 'center' }}>\r\n                    {/* Use an image tag for the loading GIF */}\r\n                    {/* <img src={loadingGif} alt=\"Loading...\" /> */}\r\n                    <p>Loading...</p>\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                <>\r\n                  {message && (\r\n                    <tr>\r\n                      <td\r\n                        colSpan=\"8\"\r\n                        style={{ textAlign: 'center', fontStyle: 'italic', color: 'red' }}\r\n                      >\r\n                        {message}\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                  {(searchQuery ? filteredAssets : filteredDefaultAssets).map((asset) => (\r\n                    <Tr key={asset._id}>\r\n                      <Td style={{ textAlign: 'center' }}>{asset.AssetName}</Td>\r\n                      <Td style={{ textAlign: 'center' }}>{asset.Location}</Td>\r\n                      <Td style={{ textAlign: 'center' }}>{asset.TaskName}</Td>\r\n                      <Td style={{ textAlign: 'center' }}>{asset.TaskDescription}</Td>\r\n                      {/* <Td></Td> */}\r\n                      <Td style={{ textAlign: 'center' }}>\r\n                        {asset.ScheduledMaintenanceDatesandIntervals}\r\n                      </Td>\r\n                      <Td></Td>\r\n                      <Td style={{ textAlign: 'center' }}>\r\n                        {new Date(asset.startDate).toISOString().split('T')[0]}\r\n                      </Td>\r\n                      <Td style={{ textAlign: 'center' }}>\r\n                        {new Date(asset.nextDate).toISOString().split('T')[0]}\r\n                      </Td>\r\n                      <Td style={{ textAlign: 'center' }}>{asset.status}</Td>\r\n                      <Td style={{ textAlign: 'center' }}>\r\n                        <NavLink to={`/editPM/${asset._id}`} style={{ color: '#000080' }}>\r\n                          <FaEdit />\r\n                        </NavLink>\r\n                      </Td>\r\n\r\n                      <Td style={{ textAlign: 'center' }}>\r\n                        <button\r\n                          className=\"btn\"\r\n                          onClick={() => this.deleteData(asset._id)}\r\n                          style={{ color: 'red' }}\r\n                        >\r\n                          {/* <img src={dlt} alt=\"\" width={30} height={30} /> */}\r\n                          <MdDelete />\r\n                        </button>\r\n                      </Td>\r\n                      {/* <td style={{ textAlign: 'center' }}>\r\n                      <NavLink to={`/taskRecord/${asset._id}`}>\r\n                        <img src={asset.Image} height={50} width={50} />\r\n                      </NavLink>\r\n                    </td> */}\r\n                    </Tr>\r\n                  ))}\r\n                </>\r\n              )}\r\n            </Tbody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AssetTable\r\n"],"names":["AssetTable","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","assets","filteredAssets","searchQuery","formData","loading","handleMouseEnter","setState","isHovered","handleMouseLeave","handleClick","prevState","isClicked","getAssetLocations","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","Location","wrap","_context","prev","next","fetch","sent","ok","Error","status","statusText","json","console","log","this","t0","error","message","stop","sendSMS","_ref2","_callee2","userInfo","phoneNumbers","nextDate","scheduledMaintenance","sender","apiKey","Data1","Data2","_iterator","_step","user","url","data","_context2","_createForOfIteratorHelper","s","n","done","value","encodeURIComponent","phoneNumber","name","t1","e","f","finish","_x","_x2","_x3","_x4","updateNextDate","_callee5","today","_ref4","updatedIds","updatedLocations","updatedAssets","idDetailsResponse","updatedAssetsArray","_context6","Date","abrupt","Promise","all","map","_ref5","_callee3","asset","frequency","daysToAdd","_context3","ScheduledMaintenanceDatesandIntervals","toLowerCase","TaskName","setDate","getDate","getDay","toISOString","split","push","_id","_x5","axios","get","params","ids","_callee4","_loop","_i","_updatedLocations","_context5","put","pms","location","userInfoResponse","_context4","forEach","delegateYield","handleSearchChange","event","query","target","filter","includes","_createClass","key","_componentDidMount","_callee6","twelveAM","delay","_this2","_context7","fetchData","bind","setHours","setTimeout","updateInterval","setInterval","then","fetchedAssets","isArray","catch","alert","clearInterval","_this3","id","_this4","window","confirm","delete","index","findIndex","newAssets","_toConsumableArray","splice","_this5","_this$state","filteredDefaultAssets","trim","_jsxs","className","style","marginTop","children","_jsx","NavLink","to","CButton","backgroundColor","htmlFor","marginLeft","role","type","placeholder","marginBottom","padding","border","borderRadius","transition","onClick","onChange","Table","Thead","Tr","Th","textAlign","height","Tbody","colSpan","_Fragment","fontStyle","color","Td","AssetName","TaskDescription","startDate","FaEdit","deleteData","MdDelete","React"],"sourceRoot":""}