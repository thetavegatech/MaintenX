{"version":3,"file":"static/js/922.756d2910.chunk.js","mappings":"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","sources":["views/tasks/TaskForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nconst MyFormComponent = () => {\r\n  // Define state variables for form inputs\r\n  const [formData, setFormData] = useState({\r\n    AssetName: '',\r\n    ScheduledMaintenanceDatesandIntervals: '',\r\n    // PMDetails: '',\r\n    TaskName: '',\r\n    TaskDescription: '',\r\n    startDate: '',\r\n    nextDate: '',\r\n    Location: '',\r\n    status: 'Pending',\r\n    pmScheduleDate: '',\r\n    nextScheduleDate: '',\r\n  })\r\n  const navigate = useNavigate()\r\n  const [assetNames, setAssetNames] = useState([])\r\n  const [successMessage, setSuccessMessage] = useState('')\r\n  const [file, setFile] = useState(null)\r\n\r\n  const [Image, setImage] = useState('')\r\n  function convertToBse64(e) {\r\n    console.log(e)\r\n    let reader = new FileReader()\r\n    reader.readAsDataURL(e.target.files[0])\r\n    reader.onload = () => {\r\n      console.log(reader.result) // base64encoded string\r\n      setImage(reader.result)\r\n    }\r\n    reader.onerror = (err) => {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Fetch asset names when the component mounts\r\n    axios\r\n      .get('https://backendmaintenx.onrender.com/api/assets')\r\n      .then((response) => {\r\n        const names = Array.from(new Set(response.data.map((asset) => asset.AssetName)))\r\n        setAssetNames(names)\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching asset names:', error)\r\n      })\r\n  }, [])\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()\r\n\r\n    try {\r\n      // Destructure form data from the state\r\n      const {\r\n        AssetName,\r\n        Location,\r\n        ScheduledMaintenanceDatesandIntervals,\r\n        pmScheduleDate,\r\n        nextScheduleDate,\r\n        TaskName,\r\n        TaskDescription,\r\n        status = 'Pending',\r\n      } = formData\r\n\r\n      console.log('Asset Name:', AssetName)\r\n      console.log('Location:', Location)\r\n      console.log('Task Name:', TaskName)\r\n      console.log('status', status)\r\n      console.log(formData)\r\n      setSuccessMessage('Form submitted successfully!')\r\n\r\n      // ... continue with other fields\r\n\r\n      // Your fetch logic here\r\n      const response = await fetch('https://backendmaintenx.onrender.com/api/pm', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-type': 'application/json',\r\n          Accept: 'application/json',\r\n          'Access-Control-Allow-Origin': '*',\r\n        },\r\n        body: JSON.stringify({\r\n          AssetName,\r\n          ScheduledMaintenanceDatesandIntervals,\r\n          Location,\r\n          TaskName,\r\n          TaskDescription,\r\n          startDate: pmScheduleDate,\r\n          nextDate: nextScheduleDate,\r\n          // Add other form data here as needed\r\n          status,\r\n        }),\r\n      })\r\n      navigate(-1)\r\n\r\n      const data = await response.json()\r\n      console.log('Response from server:', data)\r\n\r\n      setTimeout(() => {\r\n        setSuccessMessage('')\r\n      }, 5000)\r\n    } catch (error) {\r\n      console.error('Error:', error)\r\n    }\r\n  }\r\n\r\n  const someFunction = () => {\r\n    const startDate = this.state.pmScheduleDate\r\n    const frequency = this.state.ScheduledMaintenanceDatesandIntervals\r\n    const nextDate = this.getNextScheduleDate(startDate, frequency)\r\n    this.setState({ nextScheduleDate: nextDate.toISOString().split('T')[0] })\r\n    console.log(nextDate) // or any other logic you want with nextDate\r\n  }\r\n\r\n  // Handle frequency change\r\n  const handleFrequencyChange = (e) => {\r\n    const frequency = e.target.value\r\n    const startDate = formData.pmScheduleDate\r\n    const nextDate = getNextScheduleDate(startDate, frequency)\r\n    setFormData({\r\n      ...formData,\r\n      ScheduledMaintenanceDatesandIntervals: frequency,\r\n      nextScheduleDate: nextDate.toISOString().split('T')[0],\r\n    })\r\n  }\r\n\r\n  // JavaScript\r\n  function uploadFile() {\r\n    const fileInput = document.getElementById('fileInput')\r\n    const file = fileInput.files[0]\r\n\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n\r\n    fetch('http://192.168.1.17:5000/upload', {\r\n      method: 'POST',\r\n      body: formData,\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok')\r\n        }\r\n        return response.json()\r\n      })\r\n      .then((data) => {\r\n        console.log(data.message)\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error.message)\r\n      })\r\n  }\r\n\r\n  const getNextScheduleDate = (startDate, frequency) => {\r\n    let newDate = new Date(startDate)\r\n\r\n    const skipSundays = () => {\r\n      while (newDate.getDay() === 0) {\r\n        newDate.setDate(newDate.getDate() + 1)\r\n      }\r\n    }\r\n\r\n    const addWeekdays = (numDays) => {\r\n      let count = 0\r\n      while (count < numDays) {\r\n        newDate.setDate(newDate.getDate() + 1)\r\n        if (newDate.getDay() !== 0) {\r\n          // Count only weekdays (excluding Sundays)\r\n          count++\r\n        }\r\n      }\r\n    }\r\n\r\n    switch (frequency.toLowerCase()) {\r\n      case 'daily':\r\n        newDate.setDate(newDate.getDate() + 1)\r\n        skipSundays()\r\n        break\r\n      case 'weekly':\r\n        newDate.setDate(newDate.getDate() + 7)\r\n        skipSundays()\r\n        break\r\n      case 'fifteen days':\r\n        addWeekdays(15)\r\n        break\r\n      case 'monthly':\r\n        newDate.setMonth(newDate.getMonth() + 1)\r\n        // newDate.setDate(1)\r\n        addWeekdays(4)\r\n        skipSundays()\r\n        break\r\n      case 'quarterly':\r\n        // Move to the first day of the next month\r\n        newDate.setMonth(newDate.getMonth() + 3)\r\n        // newDate.setDate(1)\r\n        addWeekdays(14)\r\n        skipSundays()\r\n        break\r\n      case 'half year':\r\n        newDate.setMonth(newDate.getMonth() + 6)\r\n        // newDate.setDate(1)\r\n        addWeekdays(28)\r\n        skipSundays()\r\n        break\r\n      case 'yearly':\r\n        newDate.setFullYear(newDate.getFullYear() + 1)\r\n        // newDate.setMonth(0)\r\n        // newDate.setDate(1)\r\n        addWeekdays(52)\r\n        skipSundays()\r\n        break\r\n      default:\r\n        throw new Error('Unsupported frequency')\r\n    }\r\n\r\n    console.log('New Scheduled Date:', newDate)\r\n    return newDate\r\n  }\r\n\r\n  const handleAssetNameChange = (e) => {\r\n    const selectedAssetName = e.target.value\r\n    setFormData({ ...formData, AssetName: selectedAssetName })\r\n  }\r\n\r\n  const handleFileChange = (e) => {\r\n    setFile(e.target.files[0])\r\n  }\r\n\r\n  const handleFileUpload = async () => {\r\n    try {\r\n      const formData = new FormData()\r\n      formData.append('image', file)\r\n\r\n      await axios.post('http://192.168.1.17:3000/upload', formData)\r\n\r\n      // File uploaded successfully\r\n      console.log('File uploaded')\r\n    } catch (error) {\r\n      console.error('Error uploading file', error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"container-lg\"\r\n      style={{\r\n        border: '2px solid #ccc',\r\n        backgroundColor: '',\r\n        padding: '20px',\r\n        borderRadius: '10px',\r\n        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\r\n        width: '90%',\r\n      }}\r\n    >\r\n      {/* Display success message if it exists */}\r\n      {successMessage && (\r\n        <div className=\"alert alert-success\" role=\"alert\" style={{ marginTop: '10px' }}>\r\n          {successMessage}\r\n        </div>\r\n      )}\r\n      {/* <div className=\"container1\" style={{ border: '2px' }}> */}\r\n      <div className=\"container\">\r\n        <form onSubmit={handleSubmit} style={{ marginLeft: '%' }}>\r\n          <div className=\"row g-3\">\r\n            <div className=\"col-md-5\">\r\n              <label htmlFor=\"assetName\">Asset Name:</label>\r\n              <select\r\n                required\r\n                className=\"form-control col-sm-6\"\r\n                id=\"AssetName\"\r\n                onChange={handleAssetNameChange}\r\n                style={{ maxHeight: '50px', overflowY: 'auto' }}\r\n              >\r\n                <option value=\"\">Select an asset</option>\r\n                {assetNames.map((name) => (\r\n                  <option key={name} value={name}>\r\n                    {name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"col-md-5\">\r\n              <label htmlFor=\"Location\">Location:</label>\r\n              <select\r\n                className=\"form-control col-sm-6\"\r\n                required\r\n                id=\"Location\"\r\n                name=\"Location\"\r\n                onChange={(e) => setFormData({ ...formData, Location: e.target.value })}\r\n              >\r\n                <option value=\"\">Select an option</option>\r\n                <option value=\"Plant 1\">Plant 1</option>\r\n                <option value=\"Plant 2\">Plant 2</option>\r\n                <option value=\"Plant 3\">Plant 3</option>\r\n                <option value=\"Plant 4\">Plant 4</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"col-md-5\">\r\n              <label htmlFor=\"taskName\">Task Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                required\r\n                className=\"form-control col-sm-6\"\r\n                id=\"TaskName\"\r\n                onChange={(e) => setFormData({ ...formData, TaskName: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-5\">\r\n              <label htmlFor=\"description\" className=\"form-label\">\r\n                Task Description:\r\n              </label>\r\n              <input\r\n                className=\"form-control col-sm-6\"\r\n                required\r\n                id=\"taskDescription\"\r\n                defaultValue={''}\r\n                onChange={(e) => setFormData({ ...formData, TaskDescription: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-5\">\r\n              <label htmlFor=\"pmScheduleDate\">Start From :</label>\r\n              <input\r\n                type=\"date\"\r\n                required\r\n                className=\"form-control col-sm-6\"\r\n                id=\"pmScheduleDate\"\r\n                onChange={(e) => setFormData({ ...formData, pmScheduleDate: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-5\">\r\n              <label htmlFor=\"scheduledMaintenance\">\r\n                Scheduled Maintenance Dates and Intervals:\r\n              </label>\r\n              <select\r\n                className=\"form-control col-sm-6\"\r\n                required\r\n                id=\"scheduledMaintenance\"\r\n                name=\"ScheduledMaintenanceDatesandIntervals\"\r\n                onChange={handleFrequencyChange}\r\n              >\r\n                <option value=\"\">Select an option</option>\r\n                <option value=\"daily\">Daily</option>\r\n                <option value=\"weekly\">Weekly</option>\r\n                <option value=\"fifteen Days\">Fifteen Days</option>\r\n                <option value=\"monthly\">Monthly</option>\r\n                <option value=\"quarterly\">Quarterly</option>\r\n                <option value=\"half Year\">Half Year</option>\r\n                <option value=\"yearly\">Yearly</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"col-md-5\">\r\n              <label htmlFor=\"NextDateofMaintenance\">Next Date of Maintenance :</label>\r\n              <input\r\n                type=\"date\"\r\n                required\r\n                className=\"form-control col-sm-6\"\r\n                id=\"nextScheduleDate\"\r\n                value={formData.nextScheduleDate}\r\n                readOnly // to make it non-editable\r\n                onChange={(e) => setFormData({ ...formData, nextScheduleDate: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-5\">\r\n              <label htmlFor=\"attachment\">Attachment:</label>\r\n              <input\r\n                type=\"file\"\r\n                id=\"Image\"\r\n                name=\"Image\"\r\n                className=\"form-control col-sm-6\"\r\n                onChange={convertToBse64}\r\n              ></input>\r\n            </div>\r\n            <div className=\"col-xs-12\">\r\n              <button type=\"submit\" className=\"btn btn-primary\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {/* </div> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyFormComponent\r\n"],"names":["_useState","useState","AssetName","ScheduledMaintenanceDatesandIntervals","TaskName","TaskDescription","startDate","nextDate","Location","status","pmScheduleDate","nextScheduleDate","_useState2","_slicedToArray","formData","setFormData","navigate","useNavigate","_useState3","_useState4","assetNames","setAssetNames","_useState5","_useState6","successMessage","setSuccessMessage","_useState7","_useState8","_useState9","_useState10","setImage","useEffect","axios","get","then","response","names","Array","from","Set","data","map","asset","catch","error","console","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","_formData$status","wrap","_context","prev","next","preventDefault","log","fetch","method","headers","Accept","body","JSON","stringify","sent","json","setTimeout","t0","stop","_x","apply","arguments","getNextScheduleDate","frequency","newDate","Date","skipSundays","getDay","setDate","getDate","addWeekdays","numDays","count","toLowerCase","setMonth","getMonth","setFullYear","getFullYear","Error","_jsxs","className","style","border","backgroundColor","padding","borderRadius","boxShadow","width","children","_jsx","role","marginTop","onSubmit","marginLeft","htmlFor","required","id","onChange","selectedAssetName","target","value","_objectSpread","maxHeight","overflowY","name","type","defaultValue","toISOString","split","readOnly","reader","FileReader","readAsDataURL","files","onload","result","onerror","err"],"sourceRoot":""}